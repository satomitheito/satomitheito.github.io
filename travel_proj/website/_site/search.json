[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n  The Weight of a Warning: Exploring U.S. Travel Advisory Levels\n   Satomi Ito, Rachna Rawalpally, Caroline Delva, Amanda Hao\n\n\n\n  \n    \n        At least twice a year, the U.S. Department of State issues travel advisory levels for every country, based on conditions such as crime, terrorism, health risks, and political instability.\n        We aim to explore the underlying factors that influence these advisory levels, drawing from datasets on travel advisories, U.S. citizen deaths abroad, global safety indexes, tourism trends, and economic indicators. We seek to understand not only the rationale behind these warnings, but also their broader implications, particularly how they may impact a country's economy and global perception.\n    \n  \n\n\n\n  \n    To begin our exploration, we start with a global view of the U.S. travel advisory system. \n     This choropleth map highlights how each country is currently categorized by the U.S. Department of State.\n    \n  \n\n\n\n\n  \n\n\n\n\n  \n  \n    \n      U.S.-Issued Travel Advisory Levels by Country\n    \n  \n  \n  \n  \n    \n      Understanding the Map\n      This map visualizes USA's travel advisory levels for countries around the world. Hover over a country to see when its advisory ranking was last changed. \n      \n        ■ Level 1: Exercise Normal Precautions\n        ■ Level 2: Exercise Increased Caution\n        ■ Level 3: Reconsider Travel\n        ■ Level 4: Do Not Travel\n      \n    \n  \n\n  \n  \n\n  \n    \n      Why the U.S. Is Not Listed\n      ​The United States is not ranked in this graph because the U.S. Department of State does not issue travel advisories for domestic destinations. The travel advisory system is specifically designed to inform U.S. citizens about potential risks when traveling abroad.\n    \n  \n\n  \n  \n\n  \n    \n      Russia\n      Let's examine a specific case study: Russia.\n      With its Level 4 \"Do Not Travel\" advisory since February 2022 due to Russia's full-scale invasion of Ukraine, Russia represents one of the longest standing top risk destinations.\n      The U.S. State Department guidance cites several key concerns:\n      \n        Risk of arbitrary detention of U.S. citizens\n        Terrorism threats\n        Harassment by Russian government security officials\n        Limited ability of the U.S. Embassy to assist citizens in Russia\n      \n    \n  \n\n  \n    \n      While the map gives us a generalised overview of the advisory levels, we need to dig a little deeper into the numbers to see how they're formed.\n    \n  \n\n\n\n\n\n  \n    How Many Countries the US Deems Safe or Risky\n  \n  \n    \n  \n  \n    This visualization reveals that Level 1 (\"Exercise Normal Precautions\") is the most common designation with 86 countries, followed closely by Level 2 (\"Exercise Increased Caution\") with 80 countries. Together, these two lower-risk categories account for approximately 166 countries, or about 79% of all nations with travel advisories. What's striking is the relatively balanced distribution between countries deemed generally safe (Level 1) versus those requiring some caution (Level 2). \n    This suggests the State Department takes a measured approach to travel risk assessment, recognizing that while many destinations are safe for American travelers, a similar number warrant at least some precautions.\n    \n    Meanwhile, the higher risk categories Level 3 (\"Reconsider Travel\") and Level 4 (\"Do Not Travel\") comprise a much smaller portion of countries, with 22 and 21 nations respectively. These Level 3 and 4 designations represent locations where more serious safety concerns exist, accounting for about 21% of all countries with advisories.\n    \n    This distribution raises important questions about how these advisory levels correlate with objective safety metrics and what impact they might have on tourism and international relations for the affected countries.\n  \n\n\n\n\n  \n    To dig deeper into the reasoning behind these advisories, we compare them with the 2024 Global Peace Index (GPI) and Global Terrorism Index (GTI).\n    Published annually by Australia-based NGO Institute for Economics & Peace, the GPI and GTI measures the 163 independent territories' peacefullness and unrest. Though not a perfect measurement as \"peace\" is a concept most abstract and complex, the GPI + GTI ranks as one of the most prevalent scale regularly used by humanitarian leaders around the world such as the Dalai Lama, former Secretary-General of the United Nations Kofi Annan, and multiple Nobel Peace Prize laureates such as Martti Ahtissari and Desmond Tutu. \n\n    \n    \n    The GPI is calculated based on 23 qualitative and quantitative indicators grouped into three domains: ongoing domestic and international conflict, societal safety and security, and militarization. Lower scores indicate more peaceful conditions on a scale of 1-5, with the global median around 2.0. The most peaceful countries typically score below 1.8, while countries experiencing significant conflict often score above 2.4. \n    The GTI measures the impact of terrorism by accounting for deaths, injuries, property damage, and psychological effects. It uses a scale of 0-10, where lower scores indicate less terrorism impact. The global median score is 0.58, while countries with severe terrorism typically score above 2.0, with the highest as of this year at 8.58 in Burkina Faso - A country in West Africa plagued with ISIS-Sahel & the al-Qaida-affiliated JNIM, accounting for nearly a quarter of all terrorist deaths globally. \n    \n    \n    \n    The visualization below shows how countries compare in terms of peace and terrorism metrics, providing insight into the complex relationship between official travel warnings, preceived peace conditions, and civil unrest.\n    \n    \n      \n        Global Peace Index vs Global Terrorism Index\n        Points colored by advisory level. Higher GPI indicates less peaceful conditions. Higher GTI indicates greater terrorism impact.\n        \n      \n      \n      \n        This graph shows that higher GPI scores, meaning less peaceful countries, have a strong positive association with U.S. travel advisory levels.\nIn contrast, terrorism impact alone does not seem to drive advisory levels as strongly.\nMany countries with high terrorism scores still maintain relatively low travel advisories, suggesting that  general peace and stability, rather than terrorism specifically, plays a larger role in shaping how the U.S. determines travel risk.\n      \n     \n    \n    \n  \n\n\n\n\n  \n    Beyond safety, we were also curious about the relationship between travel advisories and tourism. Do countries with higher advisory levels see fewer tourists? Or can strong tourism economies resist the effects of warnings?\n    Tourism Trends Across U.S. Travel Advisory Levels (2000–2022)\n    \n      \n    \n    \n      These graphs show an interesting contrast between Level 1 and Level 2 advisory countries. Although Level 2 indicates a higher risk than Level 1, these destinations actually attract more tourists overall. This suggests that Level 2 advisories often reflect generalized risks like petty crime and labor strikes that are common in major travel hubs, rather than specific, isolated incidents.\n      \n      As we move into Level 3 and Level 4 countries, we see a steep decline in tourism counts, reflecting a broad global consensus on which countries are in general a higher-risk destinations that are less suitable for travel.\n      \n      However, when comparing Level 3 and Level 4 countries directly, the pattern appears again: most level 4 countries receive more tourists than Level 3 countries. This suggests that the jump from Level 3 to Level 4 may be driven less by immediate safety risks and more by political considerations.  In particular, adversarial countries like Russia are categorized as Level 4, reflecting tensions specific to the U.S., even though global travel patterns to these countries remain relatively strong.\n    \n  \n\n\n\n\n  \n    After exploring how travel advisories relate to global safety indexes and tourism, we wanted to ground our analysis in real-world outcomes, specifically, U.S. citizen deaths abroad.\n    \n    \n      \n    \n    \n    \n      The \"Death by Advisory Level\" graph reveals a critical insight: U.S. citizen deaths abroad don't necessarily align with travel advisory levels. While we might expect Level 4 countries to have the highest mortality rates, the data shows that deaths are often more common in popular tourist destinations with lower advisory levels. Mexico, despite its mixed Level 2-4 advisory status (varying by region), accounts for a significant portion of American deaths abroad—likely due to the sheer volume of U.S. visitors it receives annually rather than extraordinary danger.\n      \n      To further understand the initially counterintuitive death count, we can take a deeper look into the cause of foreign deaths in the \"Death by Cause + Level\" graph. In Level 1 and 2 countries, deaths are more commonly attributed to accidents, suicides, and natural causes, reflecting typical mortality patterns. In contrast, deaths in Level 3 and 4 countries more frequently involve homicide, terrorism, and civil unrest, the very dangers these advisories aim to highlight. This suggests that  while advisory levels may not predict overall mortality rates, they do effectively warn against specific types of violent risks that are local to the region. \n    \n  \n\n\n\n\n  \n    While deaths abroad represent one consequence of international travel, protest activity offers a more direct lens into how political and social unrest can influence a country's advisory level.\n    \n      \n    \n    \n     This linked bar plot \"Countries by Advisory Level; Protest Motivation for Selected Advisory Level\" provides an interactive tool to better understand how U.S. travel advisories are designated in relation to protest activity. The graph suggests that protests motivated by anti-government and economic reasons are the strongest determinants of a country’s advisory level.\n    \n    When taking a closer look, anti-government demonstrations emerge as the most common motivation for protests across all advisory levels, particularly in countries classified between Level 2 and Level 4. The \"Other\" category is the second most frequent, but it offers limited insight, as the specific causes of those protests are not clearly defined. Economic protests follow closely and are especially prevalent in Level 2 and Level 3 countries. Interestingly, Level 4 countries show relatively fewer protests overall likely because they represent the smallest group of countries, as shown in the \"Number of Countries by Advisory Level\" bar plot.\n\n  It can be deduced that while travel advisories are not issued solely due to protests, the presence of frequent politically and economically motivated protests, particularly in Level 2 and Level 3 countries, often aligns with higher advisory levels. However, this pattern does not consistently hold for Level 4 countries\n\n    \n  \n\n\n\n\n\n  \n    \n    Overall, this project highlights the complexity behind U.S. travel advisories. While the State Department broadly aligns advisories with real-world risks, particularly general peace and regional stability, advisory levels are also influenced by global travel patterns and political dynamics. Level 2 warnings often flag common, generalized risks in major tourist destinations, while the leap to Level 4 may sometimes reflect strategic tensions rather than just immediate safety threats. Importantly, while travel advisories may not always predict overall mortality rates abroad, they remain effective in signaling specific localized risks. \n    \n    Taken together, these findings suggest that while U.S. travel advisories are grounded in safety data, they are also shaped by broader geopolitical and social considerations. Travelers should view these advisories as valuable starting points rather than absolute judgments, complementing them with additional research on specific regions, recent developments, and personal risk tolerance. The weight of a warning carries important information, but the decision to travel ultimately requires balancing official guidance with a broader understanding of global contexts. \n  \n\n\n\n\n  \n    Explore Our Dataset\n    Want to dive deeper into the data behind our analysis? The interactive table below provides access to our complete dataset of country travel advisories and related metrics. Feel free to filter, sort, and explore the data yourself to discover additional patterns and insights.\n    \n    This table contains data for all countries with U.S. travel advisories including the current U.S. State Department travel advisory level, when the advisory was last reviewed or changed, Global Peace Index score (lower is more peaceful), Global Terrorism Index score (higher indicates greater terrorism impact), number of international tourist arrivals, and reported U.S. citizen deaths in that country. Use the search box to filter by country or advisory level, click column headers to sort, or use the export buttons to download the data for your own analysis.\n    \n    \n      \n    \n    \n  \n\n\n\n  \n    References\n    @state2023russiaadvisory; @wikipedia2025gpi; @wikipedia2025secretariat; @wikipedia2025ahtisaari; @annan2012interventions; @gish2004desmond; @state2024burkina"
  },
  {
    "objectID": "code/plotting/rachnaplots.html",
    "href": "code/plotting/rachnaplots.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\n# Load data\ndf = pd.read_csv(\"../../../data/processed/Travel_Advisories_Processed.csv\")\ndf[\"Advisory Level Number\"] = pd.to_numeric(df[\"Advisory Level Number\"], errors=\"coerce\")\n\n\nimport matplotlib.pyplot as plt\n\n# Redefine counts and labels\nadvisory_counts = df[\"Advisory Level Number\"].value_counts().sort_index()\ncolors = ['green', 'yellow', 'orange', 'red']\nlabels = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]\n\n# Create improved bar chart\nplt.figure(figsize=(8, 6))\nbars = plt.bar(labels, advisory_counts, color=colors)\n\n# Add data labels on top of bars\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, height + 1, f'{int(height)}',\n             ha='center', va='bottom', fontsize=11, fontweight='bold')\n\n# Add titles and labels\nplt.title(\"How Many Countries the US Deems Safe or Risky\", fontsize=16, fontweight='bold')\nplt.xlabel(\"US Travel Advisory Level (1 = Safe, 4 = Do Not Travel)\", fontsize=13)\nplt.ylabel(\"Number of Countries\", fontsize=13)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Example data\ndf = pd.DataFrame({\n    \"Advisory Level\": [1, 2, 3, 4],\n    \"Countries\": [86, 80, 22, 21],\n    \"Label\": [\"Safe\", \"Caution\", \"Risky\", \"Danger\"]\n})\n\nfig = px.bar(\n    df,\n    x=\"Advisory Level\",\n    y=\"Countries\",\n    color=\"Label\",\n    text=\"Countries\",\n    color_discrete_map={\n        \"Safe\": \"forestgreen\",\n        \"Caution\": \"yellow\",\n        \"Risky\": \"orange\",\n        \"Danger\": \"red\"\n    }\n)\n\nfig.update_layout(\n    #title=\"How Many Countries the US Deems Safe or Risky\",\n    xaxis_title=\"US Travel Advisory Level\",\n    yaxis_title=\"Number of Countries\",\n    showlegend=False,\n    xaxis=dict(\n        tickmode='array',\n        tickvals=[1, 2, 3, 4],\n        ticktext=[\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]\n    ),\n    paper_bgcolor=\"rgba(0,0,0,0)\",\n    plot_bgcolor=\"rgba(0,0,0,0)\",\n    xaxis_gridcolor=\"rgba(255,255,255,0.1)\",\n    yaxis_gridcolor=\"rgba(255,255,255,0.1)\",\n    font=dict(color=\"white\")\n)\n\nfig.update_traces(textposition='outside')\n\nfig.write_html(\n    \"../../img/traveladvice.html\",\n    full_html=True,\n    include_plotlyjs=\"cdn\",\n    config={\"responsive\": True}\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Load both datasets\nadvisories = pd.read_csv(\"../../data/processed/Travel_Advisories_Processed.csv\")\narrivals = pd.read_csv(\"../../data/processed/inbound_arrivals_processed.csv\")\n\n\n# Step 1: Prepare both datasets\nadvisories[\"COUNTRY_UPPER\"] = advisories[\"Country\"].str.upper().str.strip()\narrivals[\"COUNTRY_UPPER\"] = arrivals[\"Country\"].str.upper().str.strip()\n\n# Use same manual fixes as before\ncountry_name_fixes = {\n    \"BURMA (MYANMAR)\": \"MYANMAR\",\n    \"CZECH REPUBLIC\": \"CZECHIA\",\n    \"COTE D'IVOIRE\": \"IVORY COAST\",\n    \"FEDERATED STATES OF MICRONESIA\": \"MICRONESIA\",\n    \"DEMOCRATIC REPUBLIC OF THE CONGO\": \"CONGO (KINSHASA)\",\n    \"REPUBLIC OF THE CONGO\": \"CONGO (BRAZZAVILLE)\",\n    \"KOSOVO\": \"SERBIA\",\n    \"SWAZILAND\": \"ESWATINI\",\n    \"EAST TIMOR\": \"TIMOR-LESTE\",\n    \"VATICAN CITY\": \"VATICAN\",\n    \"NORTH MACEDONIA\": \"MACEDONIA\",\n    \"SAO TOME AND PRINCIPE\": \"SAO TOME & PRINCIPE\",\n    \"SYRIA\": \"SYRIAN ARAB REPUBLIC\",\n    \"LAOS\": \"LAO PEOPLE'S DEMOCRATIC REPUBLIC\",\n    \"RUSSIA\": \"RUSSIAN FEDERATION\",\n}\nadvisories[\"COUNTRY_MERGED\"] = advisories[\"COUNTRY_UPPER\"].replace(country_name_fixes)\narrivals[\"COUNTRY_MERGED\"] = arrivals[\"COUNTRY_UPPER\"]\n\n# Step 2: Create 10-year average\nyears = [str(y) for y in range(2013, 2023)]\narrivals[\"avg_arrivals\"] = arrivals[years].mean(axis=1)\n\n# Step 3: Merge datasets\nadvisories_clean = advisories[[\"COUNTRY_MERGED\", \"Advisory Level Number\"]]\narrivals_clean = arrivals[[\"COUNTRY_MERGED\", \"avg_arrivals\"]]\nmerged = pd.merge(advisories_clean, arrivals_clean, on=\"COUNTRY_MERGED\").dropna()\n\n# Step 4: Get top 5 countries for each advisory level\ntop5_by_level = (\n    merged.groupby(\"Advisory Level Number\")\n    .apply(lambda x: x.nlargest(5, \"avg_arrivals\"))\n    .reset_index(drop=True)\n)\n\ntop5_by_level.head(10)\n\n/var/folders/7t/dpwxgyj14sn5gpv6rfjdybcw0000gn/T/ipykernel_44445/4203121054.py:38: DeprecationWarning:\n\nDataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n\n\n\n\n\n\n\n\n\n\nCOUNTRY_MERGED\nAdvisory Level Number\navg_arrivals\n\n\n\n\n0\nPOLAND\n1.0\n7.364600e+07\n\n\n1\nCROATIA\n1.0\n4.956390e+07\n\n\n2\nHUNGARY\n1.0\n4.795280e+07\n\n\n3\nGREECE\n1.0\n2.483350e+07\n\n\n4\nCANADA\n1.0\n2.304811e+07\n\n\n5\nFRANCE\n2.0\n1.903231e+08\n\n\n6\nCHINA\n2.0\n1.086672e+08\n\n\n7\nSPAIN\n2.0\n1.001122e+08\n\n\n8\nITALY\n2.0\n7.519296e+07\n\n\n9\nUNITED KINGDOM\n2.0\n3.157740e+07\n\n\n\n\n\n\n\n\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nimport matplotlib.pyplot as plt\n\n# Dropdown widget\ndropdown = widgets.Dropdown(options=[1, 2, 3, 4], description=\"Advisory Level\")\n\narrivals_full = arrivals[[\"COUNTRY_MERGED\"] + years]\nfull_merged = pd.merge(advisories_clean, arrivals_full, on=\"COUNTRY_MERGED\").dropna()\n\n# Interactive plot function\ndef plot_top5_line_graph(level):\n    clear_output(wait=True)\n    display(dropdown)\n\n    level_data = full_merged[full_merged[\"Advisory Level Number\"] == level].copy()\n    level_data[\"avg_arrivals\"] = level_data[years].mean(axis=1)\n    top5 = level_data.nlargest(5, \"avg_arrivals\")\n\n    plt.figure(figsize=(10, 6))\n    for _, row in top5.iterrows():\n        plt.plot([int(y) for y in years], row[years].values, label=row[\"COUNTRY_MERGED\"], marker='o')\n    \n    plt.title(f\"Top 5 Countries (Level {level}) - Tourist Arrivals Over Time\")\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"Tourist Arrivals\")\n    plt.legend(title=\"Country\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\nwidgets.interact(plot_top5_line_graph, level=dropdown)\n\n\n\n\n&lt;function __main__.plot_top5_line_graph(level)&gt;\n\n\n\nimport numpy as np \n# Manually include countries that were overlooked due to minor issues but exist in arrivals data\nmanually_include = [\n    \"HAITI\", \"IRAQ\", \"LIBYA\", \"RUSSIAN FEDERATION\", \"SYRIAN ARAB REPUBLIC\", \"YEMEN\"\n]\n\n# Filter from arrivals\nmanual_additions = arrivals[arrivals[\"COUNTRY_MERGED\"].isin(manually_include)].copy()\n\n# Merge with their advisory level (they're all Level 4)\nmanual_additions = pd.merge(manual_additions, advisories_clean, on=\"COUNTRY_MERGED\", how=\"left\")\n\n# Ensure year values are numeric\nmanual_additions[years] = manual_additions[years].apply(pd.to_numeric, errors='coerce')\nlevel_4_all = full_merged[full_merged[\"Advisory Level Number\"] == 4].copy()\nlevel_4_all[years] = level_4_all[years].apply(pd.to_numeric, errors='coerce')\n\n# Combine with the original Level 4 dataset (without duplicates)\ncombined_level_4 = pd.concat([level_4_all, manual_additions]).drop_duplicates(subset=[\"COUNTRY_MERGED\"])\n\n# Plot updated set\nplt.figure(figsize=(12, 7))\nfor _, row in combined_level_4.iterrows():\n    country = row[\"COUNTRY_MERGED\"]\n    arrivals_values = row[years].values.astype(float)\n    if not np.all(np.isnan(arrivals_values)):\n        plt.plot([int(y) for y in years], arrivals_values, label=country, marker='o')\n\nplt.title(\"All Level 4 Advisory Countries — Tourist Arrivals Over Time (Fully Included)\", fontsize=14)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Tourist Arrivals\")\nplt.legend(title=\"Country\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Define Level 1 dataset from full_merged\nlevel_1 = full_merged[full_merged[\"Advisory Level Number\"] == 1].copy()\nlevel_1[years] = level_1[years].apply(pd.to_numeric, errors=\"coerce\")\n\n# Get top 5 Level 1 countries by average arrivals\nlevel_1[\"avg_arrivals\"] = level_1[years].mean(axis=1)\ntop5_level_1 = level_1.nlargest(5, \"avg_arrivals\")\n\n# Plot Level 1 vs Level 4 side-by-side\nfig, axs = plt.subplots(1, 2, figsize=(14, 6), sharey=True)\n\n# Left: Level 1\nfor _, row in top5_level_1.iterrows():\n    axs[0].plot([int(y) for y in years], row[years].values, label=row[\"COUNTRY_MERGED\"], marker='o')\naxs[0].set_title(\"Top 5 Level 1 Countries\")\naxs[0].set_xlabel(\"Year\")\naxs[0].set_ylabel(\"Tourist Arrivals\")\naxs[0].grid(True)\naxs[0].legend(title=\"Country\")\n\n# Right: Level 4 (already defined)\nfor _, row in combined_level_4.iterrows():\n    axs[1].plot([int(y) for y in years], row[years].values, label=row[\"COUNTRY_MERGED\"], marker='o')\naxs[1].set_title(\"All Level 4 Countries\")\naxs[1].set_xlabel(\"Year\")\naxs[1].grid(True)\naxs[1].legend(title=\"Country\", fontsize=8)\n\nfig.suptitle(\"Tourist Arrivals Over Time: Level 1 vs Level 4 Advisory Countries\", fontsize=16)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nx_years = [int(y) for y in years] \n\n\nfig = make_subplots(rows=1, cols=2, shared_yaxes=True,\n                    subplot_titles=[\"Top 5 Level 1 Countries\", \"All Level 4 Countries\"])\n\n# Level 1 Countries (no per-country legends)\nfor _, row in top5_level_1.iterrows():\n    fig.add_trace(go.Scatter(\n        x=x_years, y=row[years].values,\n        mode='lines+markers',\n        name=row[\"COUNTRY_MERGED\"],\n        legendgroup=\"level1\",\n        showlegend=False,\n        line=dict(width=2)\n    ), row=1, col=1)\n\n# Level 4 Countries (no per-country legends)\nfor _, row in combined_level_4.iterrows():\n    fig.add_trace(go.Scatter(\n        x=x_years, y=row[years].values,\n        mode='lines+markers',\n        name=row[\"COUNTRY_MERGED\"],\n        legendgroup=\"level4\",\n        showlegend=False,\n        line=dict(width=2)\n    ), row=1, col=2)\n\n# Add 1 dummy trace for Level 1 legend\nfig.add_trace(go.Scatter(\n    x=[None], y=[None], mode='lines+markers',\n    name='Level 1 Countries',\n    legendgroup=\"level1\",\n    line=dict(color='blue'),\n    marker=dict(color='blue'),\n    showlegend=True\n), row=1, col=1)\n\n# Add 1 dummy trace for Level 4 legend\nfig.add_trace(go.Scatter(\n    x=[None], y=[None], mode='lines+markers',\n    name='Level 4 Countries',\n    legendgroup=\"level4\",\n    line=dict(color='deepskyblue'),\n    marker=dict(color='deepskyblue'),\n    showlegend=True\n), row=1, col=2)\n\nfig.add_vrect(\n    x0=2020, x1=2021,\n    fillcolor=\"lightgray\",\n    opacity=0.3,\n    layer=\"below\",\n    line_width=0,\n    annotation_text=\"COVID-19\",\n    annotation_position=\"top left\"\n)\n# Layout tweaks\nfig.update_layout(\n    title=dict(\n        text=\"Tourist Arrivals Over Time: Level 1 vs Level 4 Advisory Countries\",\n        x=0.5,  # ← centers the title\n        xanchor='center',\n        font=dict(size=18)\n    ),\n    height=600,\n    width=1300,\n    margin=dict(t=100),\n    hovermode=\"x unified\",\n    legend=dict(  # &lt;- this should be inside update_layout and comma-separated\n        orientation=\"v\",\n        x=1.05,\n        y=1,\n        font=dict(size=10)\n    )\n)\n\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Example Data (replace with your merged arrivals + advisory dataset)\n# ...\n\n# [Insert cleaned `plot_df` creation here — or use your own]\n\n# Step 1: Keep only year columns and country name\nlevel_1_filtered = top5_level_1[[\"COUNTRY_MERGED\"] + years].copy()\nlevel_4_filtered = combined_level_4[[\"COUNTRY_MERGED\"] + years].copy()\n\n# Step 2: Melt both to long format\ndf1_melted = level_1_filtered.melt(id_vars=\"COUNTRY_MERGED\", var_name=\"Year\", value_name=\"Arrivals\")\ndf1_melted[\"Advisory Level\"] = \"Level 1\"\n\ndf4_melted = level_4_filtered.melt(id_vars=\"COUNTRY_MERGED\", var_name=\"Year\", value_name=\"Arrivals\")\ndf4_melted[\"Advisory Level\"] = \"Level 4\"\n\n# Step 3: Combine into plot_df\nplot_df = pd.concat([df1_melted, df4_melted])\nplot_df[\"Year\"] = plot_df[\"Year\"].astype(int)\n\nfig = go.Figure()\n\nfor level in [\"Level 1\", \"Level 4\"]:\n    level_data = plot_df[plot_df[\"Advisory Level\"] == level]\n    countries = level_data[\"COUNTRY_MERGED\"].unique()\n    for country in countries:\n        country_data = level_data[level_data[\"COUNTRY_MERGED\"] == country]\n        fig.add_trace(go.Scatter(\n            x=country_data[\"Year\"],\n            y=country_data[\"Arrivals\"],\n            mode=\"lines+markers\",\n            name=country,\n            legendgroup=level,\n            visible=True if level == \"Level 1\" else \"legendonly\",\n            hovertemplate=f\"&lt;b&gt;{country}&lt;/b&gt;&lt;br&gt;Year: %{{x}}&lt;br&gt;Arrivals: %{{y:,}}&lt;extra&gt;&lt;/extra&gt;\"\n        ))\n\nfig.add_vrect(\n    x0=2020, x1=2021,\n    fillcolor=\"lightgray\", opacity=0.3,\n    layer=\"below\", line_width=0,\n    annotation_text=\"COVID-19\", annotation_position=\"top left\"\n)\n\nfig.update_layout(\n    title=\"Tourist Arrivals Over Time — Level 1 vs Level 4 Countries\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Tourist Arrivals\",\n    legend_title=\"Country\",\n    hovermode=\"x unified\",\n    template=\"plotly_white\",\n    height=600\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Load the uploaded dataset of US citizen deaths overseas\ndeaths = pd.read_csv('../../data/processed/us_citizen_deaths_overseas_processed.csv')\n\n# Preview the dataset\ndeaths.head()\n\n\n\n\n\n\n\n\ndate\ncity\ncause_of_death\ncountry\nyear\nmonth\n\n\n\n\n0\n2003-10-25\nShkin\nTerrorist Action\nAfghanistan\n2003\n2003-10\n\n\n1\n2003-10-25\nShkin\nTerrorist Action\nAfghanistan\n2003\n2003-10\n\n\n2\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n3\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n4\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n\n\n\n\n\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n\ncause_options = list(deaths[\"cause_of_death\"].unique())\n\ndropdown = widgets.SelectMultiple(options=cause_options, value=(\"Terrorist Action\",), description=\"Causes\")\n\ndef update_plot(selected_causes):\n    filtered = deaths[deaths[\"cause_of_death\"].isin(selected_causes)]\n    data = filtered.groupby([\"year\", \"cause_of_death\"]).size().unstack(fill_value=0)\n    data.plot.area(figsize=(12,6), alpha=0.8)\n    plt.title(\"Deaths by Selected Causes\")\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"Number of Deaths\")\n    plt.legend(title=\"Cause of Death\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\nwidgets.interact(update_plot, selected_causes=dropdown)\n\n\n\n\n&lt;function __main__.update_plot(selected_causes)&gt;\n\n\n\n# Standardize country names in both datasets\ndeaths[\"COUNTRY_UPPER\"] = deaths[\"country\"].str.upper().str.strip()\nadvisories[\"COUNTRY_UPPER\"] = advisories[\"Country\"].str.upper().str.strip()\n\n# Apply same country name fixes to match advisory dataset\nadvisories[\"COUNTRY_MERGED\"] = advisories[\"COUNTRY_UPPER\"].replace(country_name_fixes)\ndeaths[\"COUNTRY_MERGED\"] = deaths[\"COUNTRY_UPPER\"].replace(country_name_fixes)\n\n# Merge to add advisory level to each death record\ndeaths_with_advisory = pd.merge(deaths, advisories[[\"COUNTRY_MERGED\", \"Advisory Level Number\"]], on=\"COUNTRY_MERGED\", how=\"left\")\n\n# Count number of deaths per advisory level\ndeaths_by_advisory_level = deaths_with_advisory[\"Advisory Level Number\"].value_counts().sort_index()\n\n\n# Step 1: Simplify cause_of_death categories\ndef simplify_cause(cause):\n    c = cause.lower()\n    if \"vehicle\" in c or \"veh\" in c:\n        return \"Vehicle Accident\"\n    elif \"drown\" in c:\n        return \"Drowning\"\n    elif \"homicide\" in c:\n        return \"Homicide\"\n    elif \"suicide\" in c or \"self-harm\" in c:\n        return \"Suicide\"\n    elif \"terrorist\" in c or \"terror\" in c:\n        return \"Terrorist Action\"\n    elif \"drug\" in c:\n        return \"Drug-Related\"\n    elif \"air accident\" in c:\n        return \"Air Accident\"\n    elif \"accident\" in c:\n        return \"Other Accident\"\n    else:\n        return \"Other\"\n\n# Apply simplification\ndeaths_with_advisory[\"simplified_cause\"] = deaths_with_advisory[\"cause_of_death\"].apply(simplify_cause)\n\n# Step 2: Group and pivot\npivot_simplified = (\n    deaths_with_advisory.groupby([\"simplified_cause\", \"Advisory Level Number\"])\n    .size()\n    .unstack(fill_value=0)\n)\n\n# Sort by total\npivot_simplified = pivot_simplified.loc[pivot_simplified.sum(axis=1).sort_values().index]\n\n# Step 3: Plot\nplt.figure(figsize=(12, 7))\npivot_simplified.plot(kind=\"barh\", stacked=True, figsize=(12, 8),\n                      color={1: \"#4CAF50\", 2: \"#FFC107\", 3: \"#FF9800\", 4: \"#F44336\"})\n\nplt.title(\"Simplified Causes of US Citizen Deaths Abroad\\nStacked by Travel Advisory Level\")\nplt.xlabel(\"Number of Deaths\")\nplt.ylabel(\"Cause of Death\")\nplt.legend(title=\"Advisory Level\", bbox_to_anchor=(1.05, 1), loc=\"upper left\")\nplt.tight_layout()\nplt.show()\n\n&lt;Figure size 1200x700 with 0 Axes&gt;"
  },
  {
    "objectID": "code/plotting/plot.html",
    "href": "code/plotting/plot.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "First Graph\n\nimport pandas as pd\nimport plotly.express as px\nfrom IPython.display import display, HTML\n\nimport plotly.graph_objects as go\n\nimport pandas as pd\nimport plotly.express as px\nfrom pandas.api.types import CategoricalDtype\nimport pycountry_convert as pc\n\n\n\n\n\ndf = pd.read_csv(\"../../../data/processed/Travel_Advisories_Processed.csv\")\ndf.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\ndf = df.dropna(subset=[\"country\", \"advisory_level_number\", \"date_updated\", \"advisory_level\"])\n\n\nordered_levels = [\"1\", \"2\", \"3\", \"4\"]\nlevel_dtype = CategoricalDtype(categories=ordered_levels, ordered=True)\ndf[\"advisory_level_str\"] = df[\"advisory_level_number\"].astype(int).astype(str).astype(level_dtype)\n\n\ndf[\"date_updated\"] = pd.to_datetime(df[\"date_updated\"]).dt.strftime(\"%B %d, %Y\")\n\n\n\ncolor_map = {\n    \"1\": \"#9be7c4\",  # Green\n    \"2\": \"#ffe082\",  # Yellow\n    \"3\": \"#ffa600\",  # Orange\n    \"4\": \"#ff0000\",  # Red\n}\n\n\nfig = px.choropleth(\n    df,\n    locations=\"country\",\n    locationmode=\"country names\",\n    color=\"advisory_level_str\",\n    hover_name=\"country\",\n    hover_data={\n        \"advisory_level\": True,\n        \"date_updated\": True,\n        \"advisory_level_number\": False,  \n        \"advisory_level_str\": False,     \n        \"country\": False                \n    },\n    color_discrete_map=color_map,\n    category_orders={\"advisory_level_str\": ordered_levels}\n)\n\n# Customize layout\nfig.update_layout(\n    #width=1400,\n    #height=750,\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='equirectangular'\n    ),\n    #legend_title_text=\"Travel Advisory Level\",\n    showlegend=False,\n    dragmode = False\n)\n\n# Export\nfig.write_html(\n    \"../../img/globalmap.html\",\n    full_html=True,\n    include_plotlyjs=\"cdn\",\n    config={\"responsive\": True}\n)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "code/data_processing/global_peace_process.html",
    "href": "code/data_processing/global_peace_process.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\ndf = pd.read_excel(\"../../data/raw/Global_Peace_Index.xlsx\", sheet_name=\"Overall Scores\", header=5)\n\n\n# Filter out csv so we only have score related columns\nscore_columns = [col for col in df.columns if 'Score' in str(col)]\ndf_scores_only = df[['country'] + score_columns]\n\n\ndf_scores_only\n\n\n\n\n\n\n\n\ncountry\n2008_Score\n2009_Score\n2010_Score\n2011_Score\n2012_Score\n2013_Score\n2014_Score\n2015_Score\n2016_Score\n2017_Score\n2018_Score\n2019_Score\n2020_Score\n2021_Score\n2022_Score\n2023_Score\n2024_Score\n\n\n\n\n0\nAfghanistan\n3.218\n3.296\n3.201\n3.212\n3.265\n3.293\n3.272\n3.363\n3.457\n3.552\n3.614\n3.619\n3.657\n3.663\n3.620\n3.287\n3.294\n\n\n1\nAlbania\n1.840\n1.859\n1.850\n1.873\n1.922\n1.944\n1.944\n1.888\n1.851\n1.820\n1.808\n1.742\n1.809\n1.796\n1.786\n1.795\n1.809\n\n\n2\nAlgeria\n2.269\n2.251\n2.293\n2.345\n2.307\n2.253\n2.227\n2.169\n2.192\n2.186\n2.193\n2.195\n2.143\n2.174\n2.068\n2.102\n2.110\n\n\n3\nAngola\n2.124\n2.042\n2.124\n2.113\n2.068\n2.105\n2.122\n1.975\n2.036\n2.024\n2.012\n1.973\n2.008\n2.010\n1.979\n2.119\n2.043\n\n\n4\nArgentina\n1.918\n1.984\n2.010\n1.950\n1.892\n2.051\n1.957\n2.056\n2.068\n2.025\n1.997\n2.010\n1.970\n1.961\n1.948\n1.857\n1.855\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n158\nVenezuela\n2.457\n2.524\n2.613\n2.555\n2.473\n2.509\n2.569\n2.676\n2.770\n2.786\n2.788\n2.838\n2.832\n2.833\n2.881\n2.843\n2.821\n\n\n159\nVietnam\n1.825\n1.825\n1.844\n1.892\n1.931\n1.895\n1.851\n1.937\n1.896\n1.921\n1.944\n1.925\n1.955\n1.883\n1.815\n1.745\n1.802\n\n\n160\nYemen\n2.421\n2.536\n2.585\n2.604\n2.682\n2.616\n2.587\n2.841\n3.276\n3.182\n3.189\n3.384\n3.406\n3.515\n3.595\n3.322\n3.397\n\n\n161\nZambia\n2.022\n1.972\n1.892\n1.782\n1.868\n1.782\n1.873\n1.870\n1.817\n1.855\n1.838\n1.835\n1.813\n2.031\n1.940\n1.954\n1.948\n\n\n162\nZimbabwe\n2.461\n2.742\n2.487\n2.467\n2.397\n2.373\n2.356\n2.203\n2.266\n2.280\n2.298\n2.418\n2.403\n2.352\n2.361\n2.353\n2.396\n\n\n\n\n163 rows × 18 columns\n\n\n\n\ndf_scores_only.to_csv(\"../../data/processed/Global_Peace_Index_Processed.csv\", index=False)"
  },
  {
    "objectID": "code/data_processing/us_citizen_deaths.html",
    "href": "code/data_processing/us_citizen_deaths.html",
    "title": "U.S. Citizen Deaths Overseas",
    "section": "",
    "text": "https://travel.state.gov/content/travel/en/international-travel/while-abroad/death-abroad1/death-statistics.html\nData is available from October 2002 to December 2022.\n\nimport pandas as pd\n\ndf = pd.read_csv('../../data/raw/us_citizen_deaths_overseas.csv', encoding='latin1')\nprint(df.head())\n\n         Date                  City    Cause of Death\n0  10/25/2003  Shkin -  Afghanistan  Terrorist Action\n1  10/25/2003  Shkin -  Afghanistan  Terrorist Action\n2  08/29/2004  Kabul -  Afghanistan  Terrorist Action\n3  08/29/2004  Kabul -  Afghanistan  Terrorist Action\n4  08/29/2004  Kabul -  Afghanistan  Terrorist Action\n\n\n\ndf.dtypes\n\nDate              object\nCity              object\nCause of Death    object\ndtype: object\n\n\n\ndf['Date'] = pd.to_datetime(df['Date'], errors='coerce') # datetime format\ndf['Country'] = df['City'].str.split('-').str[-1].str.strip() # extract country\ndf['City'] = df['City'].str.split('-').str[0].str.strip() # extract city\ndf.columns = df.columns.str.lower().str.replace(' ', '_') # standardize column names\n\n\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.to_period('M')\n\n\ndf.head()\n\n\n\n\n\n\n\n\ndate\ncity\ncause_of_death\ncountry\nyear\nmonth\n\n\n\n\n0\n2003-10-25\nShkin\nTerrorist Action\nAfghanistan\n2003\n2003-10\n\n\n1\n2003-10-25\nShkin\nTerrorist Action\nAfghanistan\n2003\n2003-10\n\n\n2\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n3\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n4\n2004-08-29\nKabul\nTerrorist Action\nAfghanistan\n2004\n2004-08\n\n\n\n\n\n\n\n\ndf.to_csv('../../data/processed/us_citizen_deaths_overseas_processed.csv', index=False)"
  },
  {
    "objectID": "code/data_processing/travel_advisory_process.html",
    "href": "code/data_processing/travel_advisory_process.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\n\n\ntravel_advisories = pd.read_csv('../../data/raw/Travel_Advisories.csv')\n\n\ntravel_advisories.dtypes\n\nCountry           object\nAdvisory Level    object\nDate Updated      object\ndtype: object\n\n\n\ntravel_advisories\n\n\n\n\n\n\n\n\nCountry\nAdvisory Level\nDate Updated\n\n\n\n\n0\nFederated States of Micronesia\nLevel 1: Exercise Normal Precautions\nJanuary 22, 2025\n\n\n1\nLiechtenstein\nLevel 1: Exercise Normal Precautions\nJuly 26, 2023\n\n\n2\nNorth Macedonia\nLevel 1: Exercise Normal Precautions\nJanuary 14, 2025\n\n\n3\nNauru\nLevel 1: Exercise Normal Precautions\nDecember 2, 2024\n\n\n4\nPalau\nLevel 1: Exercise Normal Precautions\nAugust 6, 2024\n\n\n...\n...\n...\n...\n\n\n206\nGuinea-Bissau\nLevel 3: Reconsider Travel\nMarch 24, 2025\n\n\n207\nBonaire\nLevel 1: Exercise Normal Precautions\nAugust 19, 2024\n\n\n208\nSint Eustatius\nLevel 1: Exercise Normal Precautions\nAugust 19, 2024\n\n\n209\nSaba\nLevel 1: Exercise Normal Precautions\nAugust 19, 2024\n\n\n210\nGreenland\nLevel 2: Exercise Increased Caution\nOctober 29, 2024\n\n\n\n\n211 rows × 3 columns\n\n\n\n\n# Change column type \ntravel_advisories[\"Country\"] = travel_advisories[\"Country\"].astype(str)\ntravel_advisories[\"Advisory Level\"] = travel_advisories[\"Advisory Level\"].astype(str)\ntravel_advisories[\"Date Updated\"] = pd.to_datetime(travel_advisories[\"Date Updated\"])\n\n\ntravel_advisories\n\n\n\n\n\n\n\n\nCountry\nAdvisory Level\nDate Updated\n\n\n\n\n0\nFederated States of Micronesia\nLevel 1: Exercise Normal Precautions\n2025-01-22\n\n\n1\nLiechtenstein\nLevel 1: Exercise Normal Precautions\n2023-07-26\n\n\n2\nNorth Macedonia\nLevel 1: Exercise Normal Precautions\n2025-01-14\n\n\n3\nNauru\nLevel 1: Exercise Normal Precautions\n2024-12-02\n\n\n4\nPalau\nLevel 1: Exercise Normal Precautions\n2024-08-06\n\n\n...\n...\n...\n...\n\n\n206\nGuinea-Bissau\nLevel 3: Reconsider Travel\n2025-03-24\n\n\n207\nBonaire\nLevel 1: Exercise Normal Precautions\n2024-08-19\n\n\n208\nSint Eustatius\nLevel 1: Exercise Normal Precautions\n2024-08-19\n\n\n209\nSaba\nLevel 1: Exercise Normal Precautions\n2024-08-19\n\n\n210\nGreenland\nLevel 2: Exercise Increased Caution\n2024-10-29\n\n\n\n\n211 rows × 3 columns\n\n\n\n\n# Have column for level number since advisory level is in str\ntravel_advisories[\"Advisory Level Number\"] = travel_advisories[\"Advisory Level\"].str.extract(r'Level (\\d)').astype(float)\n\n\ntravel_advisories.to_csv(\"../../data/processed/Travel_Advisories_Processed.csv\", index=False)"
  },
  {
    "objectID": "code/data_processing/global_protest_process.html",
    "href": "code/data_processing/global_protest_process.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\n\n\ndf = pd.read_excel(\"../../data/raw/Global_Protest_Tracker.xlsx\")\n\n\ndf.dtypes\n\nCountry                                     object\nProtest Name                                object\nStart Date                                  object\nFreedom Rating (Status)                     object\nTriggers                                    object\nMotivations                                 object\nPeak Size                                   object\nKey Participants                            object\nDuration                                    object\nOutcomes                                    object\nActive protests                             object\nEconomic motivation?                        object\nPolitical motivation?                       object\nCorruption motivation?                      object\nGender motivation?                          object\nSize category                               object\nProtests with a significant outcome         object\nLarge protests (Over 100,000 protesting)    object\nViolent government response                 object\nLong protests (more than 3 months)          object\nCoronavirus-related protests                object\nCapital city                                object\ndtype: object\n\n\n\n# Change specific columns to str\ndf[\"Country\"] = df[\"Country\"].astype(str)\ndf[\"Protest Name\"] = df[\"Protest Name\"].astype(str)\ndf[\"Start Date\"] = df[\"Start Date\"].astype(str)\ndf[\"Triggers\"] = df[\"Triggers\"].astype(str)\ndf[\"Motivations\"] = df[\"Motivations\"].astype(str)\ndf[\"Peak Size\"] = df[\"Peak Size\"].astype(str)\ndf[\"Duration\"] = df[\"Duration\"].astype(str)\ndf[\"Outcomes\"] = df[\"Outcomes\"].astype(str)\ndf[\"Size category\"] = df[\"Size category\"].astype(str)\n\n\n# Drop unrelated columns\ncols_to_drop = [\n    \"Key Participants\",\n    \"Freedom Rating (Status)\",\n    \"Economic motivation?\",\n    \"Political motivation?\",\n    \"Corruption motivation?\",\n    \"Gender motivation?\",\n    \"Coronavirus-related protests\",\n    \"Capital city\"\n]\n\n\ndf = df.drop(columns=cols_to_drop)\n\n\ndf.to_csv(\"../../data/processed/Global_Protest_Processed.csv\", index=False)"
  },
  {
    "objectID": "code/data_processing/global_terrorism_process.html",
    "href": "code/data_processing/global_terrorism_process.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\ndf = pd.read_excel(\"../../data/raw/Global_Terrorism_Index.xlsx\", sheet_name=\"Overall Scores\", header = 6)\n\n\ndf\n\n\n\n\n\n\n\n\ncountry\niso3c\n2011 score\n2011 rank\n2012 score\n2012 rank\n2013 score\n2013 rank\n2014 score\n2014 rank\n...\n2020 score\n2020 rank\n2021 score\n2021 rank\n2022 score\n2022 rank\n2023 score\n2023 rank\n2024 score\n2024 rank\n\n\n\n\n0\nAfghanistan\nAFG\n8.784\n3\n8.825\n3\n8.590\n3\n8.547\n4\n...\n8.734\n1\n8.818\n1\n8.459\n1\n7.834\n6\n7.262\n9\n\n\n1\nAngola\nAGO\n1.741\n66\n1.207\n74\n0.632\n82\n0.915\n74\n...\n0.123\n91\n0.059\n89\n0.030\n91\n2.254\n45\n1.657\n51\n\n\n2\nAlbania\nALB\n0.423\n92\n0.229\n101\n0.114\n101\n0.044\n105\n...\n0.000\n104\n0.000\n96\n0.000\n94\n0.000\n94\n0.000\n100\n\n\n3\nUnited Arab Emirates\nARE\n0.000\n114\n0.000\n113\n0.000\n111\n1.293\n70\n...\n0.000\n104\n0.000\n96\n0.423\n77\n0.233\n85\n1.178\n67\n\n\n4\nArgentina\nARG\n1.962\n60\n1.627\n63\n1.390\n66\n0.888\n75\n...\n1.259\n67\n1.579\n58\n1.868\n58\n1.274\n63\n0.801\n76\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n159\nYemen\nYEM\n7.034\n6\n7.621\n5\n7.485\n6\n7.477\n6\n...\n5.333\n20\n5.022\n21\n4.708\n22\n4.955\n23\n5.080\n22\n\n\n160\nSouth Africa\nZAF\n0.030\n113\n0.000\n113\n0.000\n111\n0.000\n110\n...\n0.720\n76\n0.396\n79\n0.217\n83\n0.000\n94\n0.000\n100\n\n\n161\nZambia\nZMB\n0.000\n114\n0.000\n113\n0.000\n111\n0.000\n110\n...\n0.000\n104\n0.000\n96\n0.000\n94\n0.000\n94\n0.000\n100\n\n\n162\nZimbabwe\nZWE\n0.000\n114\n0.000\n113\n0.000\n111\n0.000\n110\n...\n0.000\n104\n0.000\n96\n0.000\n94\n0.000\n94\n0.000\n100\n\n\n163\nZimbabwe\nZWE\n0.000\n114\n0.000\n113\n0.000\n111\n0.000\n110\n...\n0.000\n104\n0.000\n96\n0.000\n94\n0.000\n94\n0.000\n100\n\n\n\n\n164 rows × 30 columns\n\n\n\n\n# Filter out csv for only score related columns\nscore_columns = [col for col in df.columns if 'score' in str(col)]\ndf_scores_only = df[['country'] + score_columns]\n\n\ndf_scores_only\n\n\n\n\n\n\n\n\ncountry\n2011 score\n2012 score\n2013 score\n2014 score\n2015 score\n2016 score\n2017 score\n2018 score\n2019 score\n2020 score\n2021 score\n2022 score\n2023 score\n2024 score\n\n\n\n\n0\nAfghanistan\n8.784\n8.825\n8.590\n8.547\n8.505\n8.330\n8.494\n8.746\n8.715\n8.734\n8.818\n8.459\n7.834\n7.262\n\n\n1\nAngola\n1.741\n1.207\n0.632\n0.915\n0.423\n0.233\n0.114\n0.462\n0.233\n0.123\n0.059\n0.030\n2.254\n1.657\n\n\n2\nAlbania\n0.423\n0.229\n0.114\n0.044\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n3\nUnited Arab Emirates\n0.000\n0.000\n0.000\n1.293\n1.136\n0.720\n0.406\n0.217\n0.044\n0.000\n0.000\n0.423\n0.233\n1.178\n\n\n4\nArgentina\n1.962\n1.627\n1.390\n0.888\n0.368\n0.536\n1.933\n2.225\n1.820\n1.259\n1.579\n1.868\n1.274\n0.801\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n159\nYemen\n7.034\n7.621\n7.485\n7.477\n7.544\n7.369\n6.907\n6.536\n6.138\n5.333\n5.022\n4.708\n4.955\n5.080\n\n\n160\nSouth Africa\n0.030\n0.000\n0.000\n0.000\n0.423\n0.233\n0.123\n1.669\n1.146\n0.720\n0.396\n0.217\n0.000\n0.000\n\n\n161\nZambia\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n162\nZimbabwe\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n163\nZimbabwe\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n\n\n164 rows × 15 columns\n\n\n\n\ndf_scores_only.to_csv(\"../../data/processed/Global_Terrorism_Index_Processed.csv\", index=False)"
  },
  {
    "objectID": "code/plotting/top5_aligned_misalinged.html",
    "href": "code/plotting/top5_aligned_misalinged.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n\nadvisories_df = pd.read_csv('../../data/processed/Travel_Advisories_Processed.csv')\ngpi_df = pd.read_csv('../../data/processed/Global_Peace_Index_Processed.csv')\nterror_df = pd.read_csv('../../data/processed/Global_Terrorism_Index_Processed.csv')\nprotest_df = pd.read_csv('../../data/processed/Global_Protest_Processed.csv')\ndeaths_df = pd.read_csv('../../data/processed/us_citizen_deaths_overseas_processed.csv')\n\n\n# Filter to 2024 advisories only \nadvisories_df['Date Updated'] = pd.to_datetime(advisories_df['Date Updated'], errors='coerce')\nadvisories_2024 = advisories_df[advisories_df['Date Updated'].dt.year == 2024]\n\n\n# Global Peace Index: lower is better, use 2024 score\ngpi_df = gpi_df.rename(columns={'country': 'Country', '2024_Score': 'Global Peace Index'})[['Country', 'Global Peace Index']]\n\n# Global Terrorism Index: higher means more terrorism\nterror_df = terror_df.rename(columns={'country': 'Country', '2024 score': 'Terrorism Score'})[['Country', 'Terrorism Score']]\n\n# Protest data: aggregate number of protests per country\nprotest_df = protest_df.rename(columns={'Country': 'Country'})  # Already fine\nprotest_agg = protest_df.groupby('Country').size().reset_index(name='Protest Score')\n\n\n# US deaths abroad: count number of US citizen deaths per country\ndeaths_df = deaths_df.rename(columns={'country': 'Country'})\ndeath_agg = deaths_df.groupby('Country').size().reset_index(name='Death Count')\n\n\nmerged_df = advisories_2024.merge(gpi_df, on='Country', how='left') \\\n    .merge(terror_df, on='Country', how='left') \\\n    .merge(protest_agg, on='Country', how='left') \\\n    .merge(death_agg, on='Country', how='left')\n\n\n# Drop countries with any missing data\nmerged_df = merged_df.dropna(subset=['Global Peace Index', 'Terrorism Score', 'Protest Score', 'Death Count'])\n\n\n# Normalize each risk metric to [0, 1]\n# This allows averaging them into a composite risk score\nscaler = MinMaxScaler()\nrisk_features = ['Global Peace Index', 'Terrorism Score', 'Protest Score', 'Death Count']\nmerged_df[risk_features] = scaler.fit_transform(merged_df[risk_features])\n\n\n# Average of all normalized risk indicators\nmerged_df['Composite Risk Score'] = merged_df[risk_features].mean(axis=1)\n\n# Normalize the US advisory level (1–4) to a 0.25–1.0 scale\nmerged_df['Normalized Advisory'] = merged_df['Advisory Level Number'] / 4.0\n\n# Alignment Score = absolute difference between risk and advisory level\nmerged_df['Alignment Score'] = (merged_df['Normalized Advisory'] - merged_df['Composite Risk Score']).abs()\n\n\ntop_aligned = merged_df.nsmallest(5, 'Alignment Score')\ntop_misaligned = merged_df.nlargest(5, 'Alignment Score')\n\n\ntop_aligned \n\n\n\n\n\n\n\n\nCountry\nAdvisory Level\nDate Updated\nAdvisory Level Number\nGlobal Peace Index\nTerrorism Score\nProtest Score\nDeath Count\nComposite Risk Score\nNormalized Advisory\nAlignment Score\n\n\n\n\n40\nPoland\nLevel 1: Exercise Normal Precautions\n2024-05-01\n1.0\n0.185562\n0.257683\n0.518519\n0.015899\n0.244416\n0.25\n0.005584\n\n\n31\nGreece\nLevel 1: Exercise Normal Precautions\n2024-08-15\n1.0\n0.244026\n0.384555\n0.444444\n0.039417\n0.278111\n0.25\n0.028111\n\n\n122\nCameroon\nLevel 2: Exercise Increased Caution\n2024-12-18\n2.0\n0.742247\n0.912004\n0.148148\n0.002319\n0.451180\n0.50\n0.048820\n\n\n114\nArgentina\nLevel 1: Exercise Normal Precautions\n2024-09-20\n1.0\n0.275547\n0.105201\n0.370370\n0.012918\n0.191009\n0.25\n0.058991\n\n\n92\nSenegal\nLevel 1: Exercise Normal Precautions\n2024-10-21\n1.0\n0.391967\n0.207250\n0.148148\n0.001987\n0.187338\n0.25\n0.062662\n\n\n\n\n\n\n\n\ntop_misaligned\n\n\n\n\n\n\n\n\nCountry\nAdvisory Level\nDate Updated\nAdvisory Level Number\nGlobal Peace Index\nTerrorism Score\nProtest Score\nDeath Count\nComposite Risk Score\nNormalized Advisory\nAlignment Score\n\n\n\n\n24\nBelarus\nLevel 4: Do Not Travel\n2024-12-18\n4.0\n0.497204\n0.030602\n0.111111\n0.000000\n0.159729\n1.0\n0.840271\n\n\n74\nLibya\nLevel 4: Do Not Travel\n2024-08-01\n4.0\n0.617692\n0.211715\n0.074074\n0.000331\n0.225953\n1.0\n0.774047\n\n\n73\nLebanon\nLevel 4: Do Not Travel\n2024-12-27\n4.0\n0.701576\n0.162464\n0.111111\n0.007618\n0.245692\n1.0\n0.754308\n\n\n110\nVenezuela\nLevel 4: Do Not Travel\n2024-09-24\n4.0\n0.766650\n0.093249\n0.148148\n0.013581\n0.255407\n1.0\n0.744593\n\n\n63\nHaiti\nLevel 4: Do Not Travel\n2024-09-18\n4.0\n0.769700\n0.000000\n0.296296\n0.079828\n0.286456\n1.0\n0.713544\n\n\n\n\n\n\n\nTo evaluate how well U.S. travel advisories align with real-world risk, we combined data from four global indicators: the Global Peace Index, Global Terrorism Index, protest activity, and U.S. citizen deaths overseas. For each country, we first calculated the number of active protests and the total number of U.S. citizen deaths. Each of these four risk indicators was then normalized to a 0–1 scale using Min-Max normalization, ensuring comparability regardless of original units. We averaged the normalized values to create a Composite Risk Score, where a higher score indicates greater overall risk. U.S. travel advisories were converted to numeric levels (1 to 4) and then normalized by dividing by 4, resulting in a Normalized Advisory Score on the same 0–1 scale. Finally, the Alignment Score was calculated as the absolute difference between the Composite Risk Score and the Normalized Advisory Score. A low alignment score means the advisory closely matches the risk level, while a high score indicates potential misalignment.\nThis analysis relies on the availability and quality of external data sources, which may vary in coverage, accuracy, or timeliness. For instance, protest counts or terrorism scores may underreport events in certain regions. Also, the equal weighting of all four indicators assumes they contribute equally to travel risk, which may not reflect how the U.S. government prioritizes threats. Additionally, some U.S. advisories are based on diplomatic or political concerns that aren’t captured in quantitative risk metrics, so alignment may not always indicate correctness.\nDespite these limitations, the graph provides a valuable data-driven lens into how U.S. travel advisories compare with globally recognized indicators of risk. By normalizing and aggregating independent sources, we can consistently compare countries and identify patterns or outliers. This helps spotlight where the U.S. might be over- or under-advising, fostering transparency and critical discussion about how travel warnings are issued.\n\n# Aligned Countries Plot\nfig_aligned = px.bar(\n    top_aligned,\n    x='Alignment Score',\n    y='Country',\n    orientation='h',\n    title='Top 5 Countries with Most Aligned US Travel Advisories',\n    labels={'Alignment Score': 'Alignment Score (Lower is Better)', 'Country': 'Country'},\n)\nfig_aligned.update_layout(\n    yaxis={'categoryorder': 'total ascending'},\n    plot_bgcolor='white',\n    paper_bgcolor='white'\n)\naligned_path = '../../img/top_5_aligned_advisories.html'\nfig_aligned.write_html(aligned_path)\nfig_aligned.show()\n\n# Misaligned Countries Plot\nfig_misaligned = px.bar(\n    top_misaligned,\n    x='Alignment Score',\n    y='Country',\n    orientation='h',\n    title='Top 5 Countries with Most Misaligned US Travel Advisories',\n    labels={'Alignment Score': 'Alignment Score (Higher is Worse)', 'Country': 'Country'},\n)\nfig_misaligned.update_layout(\n    yaxis={'categoryorder': 'total ascending'},\n    plot_bgcolor='white',\n    paper_bgcolor='white'\n)\nmisaligned_path = '../../img/top_5_misaligned_advisories.html'\nfig_misaligned.write_html(misaligned_path)\nfig_misaligned.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "code/plotting/peace_terrorism_scatter.html",
    "href": "code/plotting/peace_terrorism_scatter.html",
    "title": "Global Peace Index vs Advisory Level",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\n\n# GPI\ngpi = pd.read_csv('../../../data/processed/Global_Peace_Index_Processed.csv')\ngpi_long = gpi.melt(id_vars=\"country\", var_name=\"year\", value_name=\"gpi_score\")\ngpi_long['year'] = gpi_long['year'].str.extract(r'(\\d{4})').astype(int)\n\n# GTI\ngti = pd.read_csv('../../../data/processed/Global_Terrorism_Index_Processed.csv')\ngti_long = gti.melt(id_vars=\"country\", var_name=\"year\", value_name=\"gti_score\")\ngti_long['year'] = gti_long['year'].str.extract(r'(\\d{4})').astype(int)\n\n# travel advisories\nadvisory = pd.read_csv('../../../data/processed/Travel_Advisories_Processed.csv')\nadvisory.columns = advisory.columns.str.lower()\nadvisory['country'] = advisory['country'].str.strip()\nadvisory_latest = advisory.sort_values('date updated').drop_duplicates(subset='country', keep='last')\nadvisory_latest = advisory_latest[['country', 'advisory level number']].rename(columns={'advisory level number': 'advisory_level'})\n\n# merge\nmerged = gpi_long.merge(gti_long, on=[\"country\", \"year\"], how=\"outer\")\nmerged = merged.merge(advisory_latest, on=\"country\", how=\"left\")\nmerged_clean = merged.dropna(subset=[\"advisory_level\"])\nmerged_clean = merged_clean[merged_clean['advisory_level'] == 4.0]\n\n\nmerged_clean\n\n\n\n\n\n\n\n\ncountry\nyear\ngpi_score\ngti_score\nadvisory_level\n\n\n\n\n0\nAfghanistan\n2008\n3.218\nNaN\n4.0\n\n\n1\nAfghanistan\n2009\n3.296\nNaN\n4.0\n\n\n2\nAfghanistan\n2010\n3.201\nNaN\n4.0\n\n\n3\nAfghanistan\n2011\n3.212\n8.784\n4.0\n\n\n4\nAfghanistan\n2012\n3.265\n8.825\n4.0\n\n\n...\n...\n...\n...\n...\n...\n\n\n2732\nYemen\n2020\n3.406\n5.333\n4.0\n\n\n2733\nYemen\n2021\n3.515\n5.022\n4.0\n\n\n2734\nYemen\n2022\n3.595\n4.708\n4.0\n\n\n2735\nYemen\n2023\n3.322\n4.955\n4.0\n\n\n2736\nYemen\n2024\n3.397\n5.080\n4.0\n\n\n\n\n323 rows × 5 columns\n\n\n\n\nfig_gpi = px.scatter(\n    merged_clean,\n    x=\"gpi_score\",\n    y=\"advisory_level\",\n    animation_frame=\"year\",\n    hover_name=\"country\",\n    title=\"Global Peace Index vs Travel Advisory Level\",\n    labels={\"gpi_score\": \"GPI Score\", \"advisory_level\": \"Travel Advisory Level\"}\n)\n\nfig_gpi.update_layout(yaxis=dict(tickmode='array', tickvals=[1, 2, 3, 4]))\nfig_gpi.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nGlobal Terrorism Index vs Advisory Level\n\ngti_filtered = merged_clean.dropna(subset=[\"gti_score\"])\n\nfig_gti = px.scatter(\n    gti_filtered,\n    x=\"gti_score\",\n    y=\"advisory_level\",\n    animation_frame=\"year\",\n    hover_name=\"country\",\n    title=\"Global Terrorism Index vs Travel Advisory Level\",\n    labels={\"gti_score\": \"GTI Score\", \"advisory_level\": \"Travel Advisory Level\"}\n)\n\nfig_gti.update_layout(yaxis=dict(tickmode='array', tickvals=[1, 2, 3, 4]))\nfig_gti.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "code/plotting/bubble_plot_deaths.html",
    "href": "code/plotting/bubble_plot_deaths.html",
    "title": "DSAN 5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport circlify\nfrom scipy.spatial.distance import cdist\n\n\ndf = pd.read_csv(\"../../data/processed/us_citizen_deaths_overseas_processed.csv\")\n\n\ndeath_counts = df.groupby(\"country\").size().reset_index(name=\"death_count\")\n\n\ntop_countries = death_counts.sort_values(by=\"death_count\", ascending=False).head(30)\n\n# Assign random x and y positions for plotting (to simulate a \"cluster\")\ntop_countries[\"x\"] = np.random.normal(size=len(top_countries))\ntop_countries[\"y\"] = np.random.normal(size=len(top_countries))\n\n# Plot using Plotly\nfig = px.scatter(\n    top_countries,\n    x=\"x\",\n    y=\"y\",\n    size=\"death_count\",\n    text=top_countries.apply(lambda row: f\"{row['country']}\\n{row['death_count']}\", axis=1),\n    size_max=80,\n    hover_name=\"country\",\n    title=\"U.S. Citizen Deaths Overseas by Country (Top 30)\",\n)\n\n# Make it look clean\nfig.update_traces(textposition='middle center', marker=dict(opacity=0.7, line=dict(width=1, color='black')))\nfig.update_layout(\n    showlegend=False,\n    xaxis=dict(showgrid=False, zeroline=False, visible=False),\n    yaxis=dict(showgrid=False, zeroline=False, visible=False),\n    plot_bgcolor='white'\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Circle packing layout\ncircles = circlify.circlify(\n    death_counts['death_count'].tolist(), \n    show_enclosure=False, \n    target_enclosure=circlify.Circle(x=0, y=0, r=1)\n)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.axis('off')\nax.set_title('Countries by U.S. Citizen Deaths Overseas', fontsize=14)\n\n# Draw circles\nfor circle, row in zip(circles, death_counts.itertuples()):\n    x, y, r = circle.x, circle.y, circle.r\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.7))\n    ax.text(x, y, f\"{row.country}\\n{row.death_count}\", \n            ha='center', va='center', fontsize=8)\n\nplt.show()\n\n\n---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\nCell In[23], line 2\n      1 # Circle packing layout\n----&gt; 2 circles = circlify.circlify(\n      3     death_counts['death_count'].tolist(), \n      4     show_enclosure=False, \n      5     target_enclosure=circlify.Circle(x=0, y=0, r=1)\n      6 )\n      8 # Create the plot\n      9 fig, ax = plt.subplots()\n\nFile /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/circlify.py:636, in circlify(data, target_enclosure, show_enclosure, datum_field, id_field, children_field)\n    634 if target_enclosure is None:\n    635     target_enclosure = Circle(level=0, x=0.0, y=0.0, r=1.0)\n--&gt; 636 all_circles = _circlify_level(data, target_enclosure, fields)\n    637 if show_enclosure:\n    638     all_circles.append(target_enclosure)\n\nFile /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/circlify.py:577, in _circlify_level(data, target_enclosure, fields, level)\n    575     return all_circles\n    576 circles = _handle(data, 1, fields)\n--&gt; 577 packed = pack_A1_0([circle.r for circle in circles])\n    578 enclosure = enclose(packed)\n    579 assert enclosure is not None\n\nFile /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/circlify.py:355, in pack_A1_0(data)\n    353 radiuses = [math.sqrt(value) for value in data]\n    354 for radius, next_ in look_ahead(radiuses):\n--&gt; 355     placed_circles = place_new_A1_0(\n    356         radius, next_, placed_circles, get_hole_degree_radius_w\n    357     )\n    358 return placed_circles\n\nFile /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/circlify.py:308, in place_new_A1_0(radius, next_, const_placed_circles, get_hole_degree)\n    305 margin = radius * _eps * 10.0\n    306 # Placed circles other than the 2 circles used to find the\n    307 # candidate placement.\n--&gt; 308 other_circles = [c for c in placed_circles if c not in (c1, c2)]\n    309 for cand in get_placement_candidates(radius, c1, c2, margin):\n    310     if cand is None:\n\nKeyboardInterrupt:"
  }
]